let N: int = 32;
let LAST_ROW = N - 1;

namespace std::prover(N);
    enum Query {
        Hint(fe),
        Input(int, int),
        Output(int, int),
        None,
    }

namespace MainMachine(8..64);  
    col fixed FIRST = [1] + [0]*;
    col fixed LAST(i) { if i == LAST_ROW { 1 } else { 0 } };
    col fixed DOUBLE(i) { i * 2 };
    
    col witness input(i) query match i {
        0 => std::prelude::Query::Input(0, 1),
        1 => std::prelude::Query::Input(0, 2),
        _ => std::prelude::Query::None,
    };
    
    col witness operation_id(i) query std::prelude::Query::Hint(6);
    col witness x[3];  
    col witness accumulator;
    
    x[2] = x[0] + x[1];
    
    [input, x[0]] in [DOUBLE, x[1]];
    
    accumulator' = (1 - LAST) * (accumulator + input);
    LAST * accumulator' = 0;
    
    (1 - LAST) * (operation_id' - operation_id) = 0;
    
    public out = x[2](LAST_ROW);
    public final_acc = accumulator(LAST_ROW);

